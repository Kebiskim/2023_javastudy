package day09.com.ict.edu;

public class Ex01_Array {
	public static void main(String[] args) {
		// 자바에서는 배열 자체를 class로 봄. (자바에서 하나의 배열은 하나의 객체(object)로 인식됨)
		// 기본자료형은 컴파일러가 알아서 해석하는 자료형 (논리, 문자, 정수, 실수) 
		// 객체형 배열 = 참조자료형 배열???
		// 배열 안에 배열이 있으면 2차원, 배열 안에 배열 안에 배열이 있으면 3차원 등등,, 
		// [[], []]; 게임을 하지 않는 이상 2차원까지만 주로 사용!!
		
		// 배열 : 같은 자료형의 데이터들을 한곳에 모아둔 묶음
		// ★★★ 반드시 같은 자료형이어야 한다!! (단, 프로모션, 디모션 가능)
		// 생성할 때 반드시 크기를 지정해야 한다.
		// *한번 지정된 크기는 변경되지 않는다.
		// 배열 자체는 크기를 늘리거나 줄일 수 없지만, 배열을 복사하면서는 크기 늘리거나 줄일 수 있음!!
		// 배열 데이터를 추출할 때는 일반적으로 for문을 사용한다 (배열 전용 for문이 있음 => 개선된 for문 이라고 함)
		// 배열의 종류 : 1차원 배열 vs 다차원 배열 (배열 안에 배열이 존재)
		// 기본자료형배열 vs 참조자료형배열(객체배열) 두가지로 나눠짐.
		
		// 배열 생성 순서 : 선언 => 생성 => 초기화(데이터 저장)
		// 1. 선언 : 자료형[] 이름; 또는 자료형 이름[];     ex) String[] args => args가 이름임.
		int[] su;
		// 메인메서드에서 유일하게 글자를 바꿀 수 있는 것은, *args
		// 주로 자료형[] 이름; 으로 사용함(대부분의 사람들이)
		
		// 2. 생성 : 이름 = new 자료형[배열의 크기 = 방의 수 = length = 길이];   (4 이면 방 갯수가 4개!!)
		// new는 예약어 : 메모리에 데이터를 저장할 공간을 만들어라
		// 				=> 인스턴스, 객체 생성
		// new int[4];	    // 만들어주세요, int가 저장된, 방 4개짜리 배열을. 
		// 만들면 생성ID가 생김 (사람의 주민등록번호 같은 개념)
		su = new int[4];	// 해당 생성ID를 su 에 저장함!!

		
		// 3. 데이터 저장 : 이름[index = 방 번호 = 위치 = 0부터 시작]
		// 같은 자료형 이어야만 저장 가능 (프로모션, 디모션 가능)
		su[0] = 100;
		su[1] = 'a';	// 프로모션
		su[2] = (int) 2.4;	// 형변환 해야 함 (소수점 날아감, 디모션, 캐스팅)
		su[3] = 124;
		// su[4] = 14;		// 컴파일러에서(빨간줄 안 뜨면) 안 걸리는데, 실행했을 때 오류나는 경우 => 런타임 오류라고 함!!
						// 배열크기보다 큰 경우에 실행오류 나는 것!!
		// 오류 :  java.lang.ArrayIndexOutOfBoundsException:
		
		// su[1] 에 값을 안 넣어도, 오류는 안 나옴 (없는 인덱스에 값을 넣는 경우만 오류!!)
		su[0] = 12;		// 방 1개 => 변수와 똑같음. 하나만 저장함!! 가장 최근값으로 업데이트.
		
		// 배열을 호출하면 주소(생성ID)가 출력
		System.out.println(su);
		System.out.println(su[0]);
		System.out.println(su[1]);
		System.out.println(su[2]);
		System.out.println(su[3]);
		
		// 배열의 출력은 일반적으로 for문 사용
		for (int i = 0; i < su.length; i++) {
			System.out.println(su[i]);
		}
		System.out.println("======================");
		
		// 개선된 for문 : 배열이나 컬렉션에 주로 사용
		// 				배열 전체에 대해서 정보 출력 및 가공 가능
		//				그러나 특정 몇개나 특정 하나를 별도로 출력하거나 가공할 수 없다. (단점)
		
		//	: 의 뜻 => 오른쪽 배열 데이터를 하나씩 순서대로 왼쪽에 넘긴다.
		// 위에 for문이랑 비교했을 때, i 가 없음.
		for (int k : su) {
			System.out.println(k);
		}
		for (int k : su) {
			System.out.println(k * 10);
		}
		// ★특정 인덱스 안에 들어있는 값만 변경하려면, 일반적인 for문을 사용해야 함!!
		// if(i%2 == 0)
//			System.out.println(blah blah);
		System.out.println("==========================");
		for (int k : su) {
			if(k>90)
				System.out.println(k * 10);
			else
				System.out.println(k);
		}
		// 위와 같은 식으로는 사용 가능함. 둘 중 어느쪽이 빠른지는 상관 x => 조건 까다로울 땐 그냥 일반 for문 쓰자!
		
		// int[] su;
		// su = new int[4];
		// 합치면 ▼
		// int[] su = new int[4];		// 현업에서는 가장 많이 씀.
		// int[] su = {1,2,34,51}; 		// 현업에서는 거의 안 씀.
		
		// 왼쪽 파일명에서 f2 눌러서 바꿔주면, 위에 이름도 바뀜.
		
		
		
	}
}